#! /usr/bin/env python3

from utils.function import *
from utils.colors import *
from utils.linevar import *

headText = f"""{BLUE}
#######################
## i3wm Config Tools ##
#######################{NC}"""

choiceText = f"""{YELLOW}
1. Remove i3wm Title Bar
2. Gaps Config
3. Load Default{NC}"""


def rmTitle():

    print(f"{BLUE}Removing title bar...{NC}")

    isRemoved = getVariable(TITLE_REMOVED_LINE)

    # Remove title bar config, maybe look ugly but it is what it is :>
    rmBorder = """
## Remove i3wm Title Bar ##
for_window [class=\"^.*\"] border pixel 0
new_window 1pixel"""

    for [param, value] in isRemoved.items():
        if not value == "TRUE":
            writeConfig(rmBorder)
            setVariable(TITLE_REMOVED_LINE, "TRUE")
        else:
            # Default title bar config
            editConfig("## Remove i3wm Title Bar ##", "")
            editConfig("for_window [class=\"^.*\"] border pixel 0", "")
            editConfig("new_window 1pixel", "")
            setVariable(TITLE_REMOVED_LINE, "FALSE")

    print(f"{GREEN}Title bar removed sucessfully!{NC}")
    os.system("i3-msg restart >> /dev/null")


def gapsConf():
    print(f"{BLUE}Gaps Configuration{NC}")

    ginner = int(input("Gaps inner : "))
    gouter = int(input("Gaps outer : "))
    smartGaps = input("Smart gaps (y/n) : ")

    setConfig(GAPS_INNER_LINE, GAPS_INNER_STRING, ginner)
    setConfig(GAPS_OUTER_LINE, GAPS_OUTER_STRING, gouter)

    if smartGaps == "y":
        setVariable(SMART_GAPS_LINE, "ON")
        writeConfig("smart_gaps on")
    elif smartGaps == "n":
        setVariable(SMART_GAPS_LINE, "OFF")
        editConfig("smart_gaps on", "")
    else:
        raise

    os.system("i3-msg restart >> /dev/null")


def loadDefault():
    defaultConfig()
    os.system("i3-msg restart >> /dev/null")


options = {
    1: rmTitle,
    2: gapsConf,
    3: loadDefault,
}

print(headText)
print(choiceText)
choice = input("Choice : ")

backupConfig()

try:
    options[int(choice)]()
except:
    print(f"{RED}Input error")
